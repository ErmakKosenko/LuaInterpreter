 
  
    
    
    
    
    
  

digraph { 
start0 [label="start"];
block2 [label="block"];
start0 -> block2;
statementchunk3 [label="statementchunk"];
block2 -> statementchunk3;
statement4 [label="statement"];
statementchunk3 -> statement4;
functioncall5 [label="functioncall"];
statement4 -> functioncall5;
prefixexp6 [label="prefixexp"];
functioncall5 -> prefixexp6;
var7 [label="var"];
prefixexp6 -> var7;
identifier8 [label="print"];
var7 -> identifier8;
args9 [label="args"];
functioncall5 -> args9;
string10 [label="enter a number:"];
args9 -> string10;
statement11 [label="statement"];
statementchunk3 -> statement11;
varlist12 [label="varlist"];
statement11 -> varlist12;
var13 [label="var"];
varlist12 -> var13;
identifier14 [label="n"];
var13 -> identifier14;
binop15 [label="="];
statement11 -> binop15;
explist16 [label="explist"];
statement11 -> explist16;
term17 [label="term"];
explist16 -> term17;
prefixexp18 [label="prefixexp"];
term17 -> prefixexp18;
functioncall19 [label="functioncall"];
prefixexp18 -> functioncall19;
prefixexp20 [label="prefixexp"];
functioncall19 -> prefixexp20;
var21 [label="var"];
prefixexp20 -> var21;
prefixexp22 [label="prefixexp"];
var21 -> prefixexp22;
var23 [label="var"];
prefixexp22 -> var23;
identifier24 [label="io"];
var23 -> identifier24;
dot25 [label="."];
var21 -> dot25;
identifier26 [label="read"];
var21 -> identifier26;
args27 [label="args"];
functioncall19 -> args27;
leftparentheses28 [label="("];
args27 -> leftparentheses28;
explist29 [label="explist"];
args27 -> explist29;
term30 [label="term"];
explist29 -> term30;
string31 [label="*number"];
term30 -> string31;
rightparentheses32 [label=")"];
args27 -> rightparentheses32;
statement33 [label="statement"];
statementchunk3 -> statement33;
for34 [label="for"];
statement33 -> for34;
identifier35 [label="i"];
statement33 -> identifier35;
equal36 [label="="];
statement33 -> equal36;
term37 [label="term"];
statement33 -> term37;
integer38 [label="2"];
term37 -> integer38;
comma39 [label=","];
statement33 -> comma39;
term40 [label="term"];
statement33 -> term40;
prefixexp41 [label="prefixexp"];
term40 -> prefixexp41;
var42 [label="var"];
prefixexp41 -> var42;
identifier43 [label="n"];
var42 -> identifier43;
do44 [label="do"];
statement33 -> do44;
block45 [label="block"];
statement33 -> block45;
statementchunk46 [label="statementchunk"];
block45 -> statementchunk46;
statement47 [label="statement"];
statementchunk46 -> statement47;
if48 [label="if"];
statement47 -> if48;
term49 [label="term"];
statement47 -> term49;
term50 [label="term"];
term49 -> term50;
term51 [label="term"];
term50 -> term51;
prefixexp52 [label="prefixexp"];
term51 -> prefixexp52;
var53 [label="var"];
prefixexp52 -> var53;
identifier54 [label="n"];
var53 -> identifier54;
binop55 [label="%"];
term50 -> binop55;
prefixexp56 [label="prefixexp"];
term50 -> prefixexp56;
var57 [label="var"];
prefixexp56 -> var57;
identifier58 [label="i"];
var57 -> identifier58;
binop59 [label="=="];
term49 -> binop59;
integer60 [label="0"];
term49 -> integer60;
then61 [label="then"];
statement47 -> then61;
block62 [label="block"];
statement47 -> block62;
statementchunk63 [label="statementchunk"];
block62 -> statementchunk63;
statement64 [label="statement"];
statementchunk63 -> statement64;
functioncall65 [label="functioncall"];
statement64 -> functioncall65;
prefixexp66 [label="prefixexp"];
functioncall65 -> prefixexp66;
var67 [label="var"];
prefixexp66 -> var67;
prefixexp68 [label="prefixexp"];
var67 -> prefixexp68;
var69 [label="var"];
prefixexp68 -> var69;
identifier70 [label="io"];
var69 -> identifier70;
dot71 [label="."];
var67 -> dot71;
identifier72 [label="write"];
var67 -> identifier72;
args73 [label="args"];
functioncall65 -> args73;
leftparentheses74 [label="("];
args73 -> leftparentheses74;
explist75 [label="explist"];
args73 -> explist75;
term76 [label="term"];
explist75 -> term76;
prefixexp77 [label="prefixexp"];
term76 -> prefixexp77;
var78 [label="var"];
prefixexp77 -> var78;
identifier79 [label="i"];
var78 -> identifier79;
rightparentheses80 [label=")"];
args73 -> rightparentheses80;
statement81 [label="statement"];
statementchunk63 -> statement81;
functioncall82 [label="functioncall"];
statement81 -> functioncall82;
prefixexp83 [label="prefixexp"];
functioncall82 -> prefixexp83;
var84 [label="var"];
prefixexp83 -> var84;
prefixexp85 [label="prefixexp"];
var84 -> prefixexp85;
var86 [label="var"];
prefixexp85 -> var86;
identifier87 [label="io"];
var86 -> identifier87;
dot88 [label="."];
var84 -> dot88;
identifier89 [label="write"];
var84 -> identifier89;
args90 [label="args"];
functioncall82 -> args90;
leftparentheses91 [label="("];
args90 -> leftparentheses91;
explist92 [label="explist"];
args90 -> explist92;
term93 [label="term"];
explist92 -> term93;
string94 [label=" is a factor of "];
term93 -> string94;
rightparentheses95 [label=")"];
args90 -> rightparentheses95;
statement96 [label="statement"];
statementchunk63 -> statement96;
functioncall97 [label="functioncall"];
statement96 -> functioncall97;
prefixexp98 [label="prefixexp"];
functioncall97 -> prefixexp98;
var99 [label="var"];
prefixexp98 -> var99;
identifier100 [label="print"];
var99 -> identifier100;
args101 [label="args"];
functioncall97 -> args101;
leftparentheses102 [label="("];
args101 -> leftparentheses102;
explist103 [label="explist"];
args101 -> explist103;
term104 [label="term"];
explist103 -> term104;
prefixexp105 [label="prefixexp"];
term104 -> prefixexp105;
var106 [label="var"];
prefixexp105 -> var106;
identifier107 [label="n"];
var106 -> identifier107;
rightparentheses108 [label=")"];
args101 -> rightparentheses108;
end109 [label="end"];
statement47 -> end109;
end110 [label="end"];
statement33 -> end110;

}PREFIX: print

_______PROGRAM OUTPUT________
enter a number:
x = not a symbol y = not a symbol z = not a symbol
